Description: Deploys an EC2 instance running a self-hosted Continuous Integration application as a Docker container

Parameters:
  ApplicationType:
    Type: String
    Description: Select the application to launch
    Default: jenkins
    AllowedValues:
      - jenkins
      - teamcity
      - bamboo
    ConstraintDescription: Must be one of jenkins, teamcity, or bamboo.

  InstanceType:
    Type: String
    Description: Select the EC2 instance type to use for the server
    Default: t3.2xlarge
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

Mappings:
  ApplicationDockerCommands:
    jenkins:
      VolumeCommands: "docker volume create --name jenkins_home"
      RunCommands: |
        docker run --detach --restart=on-failure --user=root --net=host \
          --name jenkins \
          --volume jenkins_home:/var/jenkins_home \
          --publish 80:8080 --publish 50000:50000 \
          jenkins/jenkins:lts
      Instructions: |
        After the stack indicates 'CREATE_COMPLETE', connect to the instance using session manager. Then run the following command to get the initial admin password: 'sudo docker logs jenkins'. Then open the Jenkins UI in a new tab using the ApplicationURL output. Enter the password when prompted.

    teamcity:
      VolumeCommands: "docker volume create --name teamcity_data && docker volume create --name teamcity_logs"
      RunCommands: |
        docker run --detach --restart=on-failure --user=root --net=host \
          --name teamcity-server \
          --volume teamcity_data:/data/teamcity_server/datadir --volume teamcity_logs:/opt/teamcity/logs \
          --publish 80:8111 \
          jetbrains/teamcity-server
      Instructions: |
        After the stack indicates 'CREATE_COMPLETE', open the TeamCity UI in a new tab using the ApplicationURL output. Follow the instructions to set up the server. If needed,  connect to the instance using session manager and run the following command to get the super user password: 'sudo docker logs teamcity-server'.

    bamboo:
      VolumeCommands: "docker volume create --name bamboo_home"
      RunCommands: |
        docker run --detach --restart=on-failure --user=root --net=host \
          --name bamboo \
          --volume bamboo_home:/var/atlassian/application-data/bamboo \
          --publish 80:8085 --publish 54663:54663 \
          atlassian/bamboo
      Instructions: |
        After the stack indicates 'CREATE_COMPLETE', open the Bamboo UI in a new tab using the ApplicationURL output. Follow the instructions to set up the server. If needed,  connect to the instance using session managet to view the installation logs: 'sudo docker logs bamboo'.

Resources:
  Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: [!Ref Role]

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow TCP traffic on port 80
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  Server:
    Type: AWS::EC2::Instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          application_installation:
            - install_cfn
            - install_apps
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root            
            
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v
                      --stack ${AWS::StackName}
                      --resource Server
                      --configsets application_installation
                      --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        
        install_apps:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'

    Properties:
      InstanceType: !Ref InstanceType
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs}}"
      IamInstanceProfile: !Ref Profile
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log) 2>&1

            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource Server \
              --configsets application_installation

            ${VolumeCommands}
            ${RunCommands}

            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource Server
          - VolumeCommands: !FindInMap [ApplicationDockerCommands, !Ref ApplicationType, VolumeCommands]
            RunCommands: !FindInMap [ApplicationDockerCommands, !Ref ApplicationType, RunCommands]
 
Outputs:
  ForReasearchPurposesOnly:
    Description: This configuration is for research purposes only
    Value: This template and the resources it deploys are for research purposes only. Neither the template nor the resources are intended for production use.
  
  ApplicationURL:
    Value: !Sub 'http://${Server.PublicDnsName}/'
    Description: Open this URL in a new tab to access the application
  
  Instructions:
    Description: Use these additional instructions to set up the application
    Value: !FindInMap [ApplicationDockerCommands, !Ref ApplicationType, Instructions]
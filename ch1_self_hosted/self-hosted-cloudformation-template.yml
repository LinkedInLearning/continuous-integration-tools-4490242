Description: Deploys an EC2 instance running a self-hosted Continuous Integration application as a Docker container

Parameters:
  ApplicationType:
    Type: String
    Description: Select the application to launch
    Default: jenkins
    AllowedValues:
      - jenkins
      - teamcity
      - bamboo
    ConstraintDescription: Must be one of jenkins, teamcity, or bamboo.

  InstanceType:
    Type: String
    Description: Select the EC2 instance type to use for the server
    Default: t3.2xlarge
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

Mappings:
  ApplicationDockerCommands:
    jenkins:
      VolumeCommands: "docker volume create --name jenkins_home"
      RunCommands: |
        docker run --detach \
          --name jenkins \
          --volume jenkins_home:/var/jenkins_home \
          --publish 80:8080 --publish 50000:50000 \
          jenkins/jenkins:lts
      Instructions: |
        After the instance launches, you can access Jenkins at http://<instance_public_ip>/.
    teamcity:
      VolumeCommands: "docker volume create --name teamcity_data && docker volume create --name teamcity_logs"
      RunCommands: |
        docker run --detach \
          --name teamcity-server \
          --volume teamcity_data:/data/teamcity_server/datadir --volume teamcity_logs:/opt/teamcity/logs \
          --publish 80:8111 \
          jetbrains/teamcity-server
      Instructions: |
        After the instance launches, you can access TeamCity at http://<instance_public_ip>/.
    bamboo:
      VolumeCommands: "docker volume create --name bamboo_home"
      RunCommands: |
        docker run --detach \
          --name bamboo \
          --volume bamboo_home:/var/atlassian/application-data/bamboo \
          --publish 80:8085 --publish 54663:54663 \
          atlassian/bamboo
      Instructions: |
        After the instance launches, you can access Bamboo at http://<instance_public_ip>/.


Resources:
  Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: [!Ref Role]

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow TCP traffic on port 80
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  Server:
    Type: AWS::EC2::Instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          application_installation:
            - install_cfn
            - install_apps
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root            
            
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v
                      --stack ${AWS::StackName}
                      --resource Server
                      --configsets application_installation
                      --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        
        install_apps:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'

    Properties:
      InstanceType: !Ref InstanceType
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs}}"
      IamInstanceProfile: !Ref Profile
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log) 2>&1

            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource Server \
              --configsets application_installation

            ${VolumeCommands}
            ${RunCommands}

            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --region ${AWS::Region} \
              --resource Server
          - VolumeCommands: !FindInMap [ApplicationDockerCommands, !Ref ApplicationType, VolumeCommands]
            RunCommands: !FindInMap [ApplicationDockerCommands, !Ref ApplicationType, RunCommands]
 
Outputs:
  ApplicationURL:
    Value: !Sub 'http://${Server.PublicDnsName}/'
    Description: Open this URL in a new tab to access the application
  Instructions:
    Description: Use these additional instructions for setting up the application
    Value: !FindInMap [ApplicationDockerCommands, !Ref ApplicationType, Instructions]